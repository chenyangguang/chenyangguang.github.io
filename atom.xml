<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>重剑无锋</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenyangguang.github.com/"/>
  <updated>2019-05-12T11:30:04.101Z</updated>
  <id>http://chenyangguang.github.com/</id>
  
  <author>
    <name>Gitvim</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>arch-key</title>
    <link href="http://chenyangguang.github.com/2019-05-12-arch-key/"/>
    <id>http://chenyangguang.github.com/2019-05-12-arch-key/</id>
    <published>2019-05-12T11:13:51.000Z</published>
    <updated>2019-05-12T11:30:04.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="arch-系统signature错误"><a href="#arch-系统signature错误" class="headerlink" title="arch 系统signature错误"></a>arch 系统signature错误</h1><p>升级或者重装失败时，报 error: krb5: signature from … is unknown trust<br>… invalid or corrupted package (PGP singature)</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman-<span class="built_in">key</span> --refresh-<span class="built_in">keys</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pacman -Sy archlinux-keyring</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;arch-系统signature错误&quot;&gt;&lt;a href=&quot;#arch-系统signature错误&quot; class=&quot;headerlink&quot; title=&quot;arch 系统signature错误&quot;&gt;&lt;/a&gt;arch 系统signature错误&lt;/h1&gt;&lt;p&gt;升级或者重装
      
    
    </summary>
    
    
      <category term="灵犀指" scheme="http://chenyangguang.github.com/tags/%E7%81%B5%E7%8A%80%E6%8C%87/"/>
    
  </entry>
  
  <entry>
    <title>arch</title>
    <link href="http://chenyangguang.github.com/2019-05-12-arch-1/"/>
    <id>http://chenyangguang.github.com/2019-05-12-arch-1/</id>
    <published>2019-05-12T11:12:25.000Z</published>
    <updated>2019-05-12T11:12:25.744Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>buy</title>
    <link href="http://chenyangguang.github.com/2019-03-05-buy/"/>
    <id>http://chenyangguang.github.com/2019-03-05-buy/</id>
    <published>2019-03-05T14:06:37.000Z</published>
    <updated>2019-03-05T14:10:15.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="现代的买卖"><a href="#现代的买卖" class="headerlink" title="现代的买卖"></a>现代的买卖</h1><p>买卖初始的方式是各取所需，等价交换，按需交易。现如今，买卖变成了是一场场战争，没有底线地刺激人的欲望和需求。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;现代的买卖&quot;&gt;&lt;a href=&quot;#现代的买卖&quot; class=&quot;headerlink&quot; title=&quot;现代的买卖&quot;&gt;&lt;/a&gt;现代的买卖&lt;/h1&gt;&lt;p&gt;买卖初始的方式是各取所需，等价交换，按需交易。现如今，买卖变成了是一场场战争，没有底线地刺激人的欲望和需求。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="点滴" scheme="http://chenyangguang.github.com/tags/%E7%82%B9%E6%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>经济机器是怎样运行的</title>
    <link href="http://chenyangguang.github.com/2018-12-09-how-economy-running/"/>
    <id>http://chenyangguang.github.com/2018-12-09-how-economy-running/</id>
    <published>2018-12-09T03:18:10.000Z</published>
    <updated>2018-12-09T12:35:35.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对经济的兴趣"><a href="#对经济的兴趣" class="headerlink" title="对经济的兴趣"></a>对经济的兴趣</h1><p>我原先一直没兴趣关注关系经济学相关的东西。读书时代喜欢更多的热衷于谈论家国大事，总是幻想着仗剑闯天涯，怎么干一番开天辟地的，前无古人后无来者的大业，整天跟着时事到处转悠。到今天没被忽悠瘸，也真是庆幸。<br>今天了解下经济机器是怎么运行了。因为我已经开始对投资，对赚钱，对经济的运行规律整出兴趣来了。<br>这是我在一个视频里面看到的。不一定就对，看自己判断了。我把视频说的记录下来，再自己琢磨琢磨。<br>开始了。</p><h1 id="经济机器"><a href="#经济机器" class="headerlink" title="经济机器"></a>经济机器</h1><p>经济就像一部简单的机器一样运行。但是很多人不大懂得这一点，或是对经济的运行方式持有不同观点, 于是导致很多不必要的经济损失。<br>经济虽然看起来复杂，但是其实是以简单和机械的方式运行。经济由几个简单的零部件和无数次重复的简单交易组成,这些交易首先是由人的天性所驱动，因而形成三股主要的经济动力。</p><ul><li>一，生产率的提高，</li><li>二，短期债务周期，</li><li>三, 长期债务周期。</li></ul><h2 id="交易"><a href="#交易" class="headerlink" title="交易"></a>交易</h2><p>经济不过是无数交易的总和，而交易是一件非常简单的事情。交易时刻都在发生，我们每次买东西都是进行一笔交易。在每次交易中，买方使用货币或信用向卖方交换商品、服务或金融资产。<strong>信用</strong>在使用时和货币一样，因此把花费的货币和信用加在一起，就可以得出支出总额。支出总额是经济的驱动力，如果用支出金额除以销量，就得出价格。就这么简单，这就是交易。<strong>交易</strong>是经济机器的最基本零件，所有经济周期和动力都是交易造成的。所以理解了交易，才能理解整个经济。</p><p>  一个市场由买卖同一种商品的所有买方和卖方组成，例如, 小麦市场、汽车市场、股票市场和千万种其他市场，经济就是由所有市场内的全部交易构成。把全部市场内的总支出和销量加在一起，就得到了了解经济运行所需要的全部信息。个人、企业、银行和政府都在以上述方式从事交易，用货币和信用，交换商品、服务和金融资产。政府是最大的买方和卖方，而政府有两个组成部分：即收税的中央政府和花钱的中央银行。央行控制着经济中的货币和信贷数量，因此不同于其他买方和卖方。央行通过影响利率和发行更多货币来实行这种控制。因此，央行在信贷流通当中发挥着重要作用。</p><h2 id="信贷"><a href="#信贷" class="headerlink" title="信贷"></a>信贷</h2><p>  <strong>信贷</strong> 是经济中最重要的的组成部分，但也许是人们最不了解的部分。它之所以最重要，是因为它是经济中最大且最变幻莫测的一部分。贷款人和借款人与在市场中进行交易的买方和卖方没有两样。通常，贷款人希望自己的钱生出更多的钱，而借款人则想购买当前无法负担的某种东西。比如房子、汽车、或是进行投资，例如开办企业。借贷可以同时满足贷款人和借款人的需要。借款人保证偿还借款，成为本金，并支付额外的款额，称为<em>利息</em>。<strong>利率高时，借贷就会减少，原因是贷款变得昂贵；当利率低时，借贷就会增加,原因是贷款变得便宜</strong>。如果借款人保证偿还债务，而且借款人相信这一承诺，信贷就产生了。任何两个人都可以通过协定凭空创造出信贷！信贷看似简单，实则复杂，因为信贷还有其他名称。 信贷一旦产生，立即成为 <strong>债务</strong> 。债务是借款人的资产，是借款人的负债。等到借款人今后偿还了贷款并支付了利息，这些资产和负债将消失，交易得以完成。那么为什么信贷如此重要? </p><p>  这是因为，借款人一旦获得信贷，便可以增加自己的支出。不要忘记，支出是经济的驱动力，这是因为<strong>一个人的支出是另一个人的收入</strong>。想想看，你每花一块钱，另一个人挣了一块钱；而你每挣一块钱，必定有别人花了一块钱。所以你花的越多，别人挣得就越多。如果某人的收入增加，其信用度就会提高，贷款人就更愿意把钱借给他。信用良好的人具备两个条件：<strong>偿还能力</strong>和<strong>抵押物</strong>。收入债务比率高，借款人就具备偿还能力。如果无法偿还，借款人还可以用有价值的、可以出售的资产作为抵押物。这样，贷款人可以放心地把钱借给他们。所以，收入增加使得借贷也增加，从而能够增加支出。由于一个人的支出是另一人的收入，这将导致借贷进一步增加，并不断循坏。这一自我驱动的模式导致经济增长，也正因为如此，才产生了经济周期。</p><p>在一项交易中为了获得某样东西你必须付出另一样东西，长期来看，你得到多少取决于你生产多少。我们的知识随时间而逐渐增多,知识的积累会提高我们的生活水平，我们将此称为<strong>生产率的提高</strong>。一个善于创新和勤奋的人，将比那些自满和懒惰的人更快的提高生产率和生活水平。但在短期内不一定体现出来。生产率在长期内最关键，但信贷在短期内最重要。这是因为生产率的提高不会剧烈波动，因此不是经济起伏的一个重要动力。但是债务是这种动力，因为我们能够通过借债让消费超过支出，但是在还债时不得不让消费低于支出。债务量的波动有两大周期，其中一个周期持续大约5年至8年，另一个持续大约75年到100年。大部分人虽然能感受到波动，但由于离波动太近，每天、每周都身临其境，通常并不认为这是周期。</p><p>如上所述，<strong>经济的上下起伏不是取决于人们多么善于创新或勤奋工作，而是主要看信贷的数量</strong>。我们先想象一个没有信贷的经济运行。在这样的经济运行中，增加支出的唯一办法就是增加收入，因此需要提高生产率和工作量。提高生产率和经济增长的唯一途径。由于我的支出是另一个人的收入，当我或者另一个人的生产率提高的时候，经济就会增长。我们如果观察各种交易，加以总结就会发现一条类似于生产率增长轨迹的渐近线。但是，由于我们借债，于是产生了周期，原因并不是任何法规，而是人的天性和信贷的运作方式。<strong>借债不过是提前消费</strong>，为了购买现在买不起的东西，你的支出必然超过收入。因此，你需要借钱，实质上是向未来的自己借钱。 你给自己设定了一个未来的时间，到那个时候，你的支出必须少于收入，以便偿还债务。 这样马上就形成了一个周期。通常一旦你借钱，就制造了一个周期，对于个人这样，对于整个经济运行也是这样。这就是为什么必须理解信贷，因为<strong>信贷触发了一系列机械和可以预料的、将在未来发生的事件， 这就是信贷不同于货币的地方</strong>。完成交易需要货币, 当你在酒吧用现金买一瓶啤酒时，交易立即完成。但是如果你用信用买一瓶啤酒，比如赊账，你相当于承诺今后为这瓶啤酒付钱。你和酒吧一起创造了一笔资产和一笔债务，你们凭空制造出了信贷。只有在你今后清偿了这笔赊账之后，上述资产和负债才会消失，债务才会还清，交易才会了结。</p><p>现实生活中，大部分所谓的钱实际上是信贷。不要忘记，<strong>在没有信贷的经济运行中，增加支出的唯一办法是提高生产</strong>。但是在有信贷的经济运行中，还可以通过借贷来增加支出。因此，有信贷的经济运行能增加支出，使得收入的增长速度在短期内超过生产率的增长，但在长期内并非如此。<strong>但是信贷不一定是坏事</strong>, 只是会导致周期性变化。信贷如果造成超过偿还能力的过度消费，就是不良信贷。但是信贷如果高效率地分配资源和产生收入让你能偿还债务，就是良性信贷。例如，如果你借钱买一台大彩电，电视机不会带来任何收入让你偿还债务。但是你如果借钱买一台拖拉机，用它来收获更多的庄稼，赚更多的钱你就能偿还债务，提高生活水平。在有信贷的经济运行中，我们可以跟踪各种交易，观察信贷如何带来经济增长。</p><p>举一个例子： 假设你每年挣10万美元，没有任何债务。你有不错的信用，可以借一万美元，例如用信用卡借。因此，你每年可以花11万美元，即使你的收入只有10万美元。由于你的支出是别人的收入，另一个人因此挣了11万美元，这个挣了11万美元的人如果没有任何债务，可以借1.1万美元。他可以消费12.1万美元，即使他的年收入只有11万美元。由于他的支出是另一个人的收入，而我们通过跟踪各种交易，可以看到这个过程不断自我强化。但不要忘记，<strong>借债形成周期</strong>，周期会上升，最终也会下降。</p><h2 id="短期债务周期"><a href="#短期债务周期" class="headerlink" title="短期债务周期"></a>短期债务周期</h2><p>下面我们来谈谈短期债务周期。随着经活动的增加，出现了扩张，这是短期债务周期的第一阶段。支出继续增加，价格开始上涨。原因是：导致支出增加的是信贷，而信贷可以即刻凭空产生。如果<strong>支出和收入的增长速度超过所售出的商品的生产速度，价格就会上涨</strong>。我们把价格的上涨成为<strong>通货膨胀</strong>。</p><p>央行不希望通货膨胀过高，因为这会导致很多问题。央行在看到价格上涨时就会提高利率。随着利率的上升，有能力借钱的人会减少，同时现有债务成本也会上升，就等于你每个月的信用卡还款额会增加。由于人们减少借债，还款额度增长，剩下来用于支出的资金将减少，因此支出速度放慢。而由于一个人的支出是另一个人的收入，环环相扣，人们的收入将下降。由于支出减少，价格将下跌，我们称之为<strong>通货紧缩</strong>。经济活动减少，经济便进入衰退。如果衰退过于严重，而且通货膨胀不再成为问题，央行将降低利率，使经济活动重新加速。随着利率降低，偿债成为下降，借债和支出增加，出现另一次经济扩张。</p><p>可见，经济像一部机器一样运行。<strong>在短期债务周期中，限制支出的唯一因素是贷款人和借款人的贷款和借款意愿</strong>。如果信贷易于获得，经济就会扩张。如果信贷不易获得，经济就会衰退。请注意，这个周期主要由央行控制。短期债务周期通常持续5-8年，在几十年里不断重复。但是，请注意在每一个周期的低谷和高峰后，经济增长和债务都超过一前一个周期。为什么会这样呢？这是人促成的。人具有借更多钱和花更多钱的倾向，而不喜欢偿还债务，这是人的天性。因此，在长期内，债务增加的速度超过收入，从而形成长期债务周期。</p><p>尽管人们的债务增加，但贷款人会提供更宽松的信贷条件，这是为什么？这是因为，大家都以为形势一片大好！人们仅注意最近出现的情况。最近的情况是什么呢？收入一直在增加！资产价值不断上升！股票市场欣欣向荣！现在是繁荣时期！用借来的钱购买商品、服务和金融资产很划算。当人们过度借贷消费时，<strong>泡沫</strong>便产生了。因此，尽管债务一直增加。但收入也以相近的速度增加，从而抵消了债务。我们把债务与收入比率称为<strong>债务负担</strong>，只要收入继续上升，债务负担就可以承受。于此同时，资产价值迅猛上升，人们大量借钱来购买资产，因为投资促使资产价格日益升高。人们感觉自己很富有。因此，尽管积累了大量债务，收入和资产价值的上升，帮助借款人可以在长期内保持良好的信用度。但是这种情况显然无法永久持续下去，也确实没有持续下去。到了一定的时候，偿债成本的增加速度超过收入，迫使人们消减支出。</p><p>由于一个人的支出是另一个的收入，收入开始下降。人们的信用因此降低，致使借贷减少。偿债成本继续增加，使得支出进一步减少，周期开始逆转。这时到达长期债务的顶峰，债务负担变得过重。美国、欧洲和世界上很多其他地区在 2008 年就发生了这一情况，日本在 1989 年和美国在 1929 年因同样原因发生了这一情况。 现在经济进入去杠杆化时期。在去杠杆化过程中，人们削减支出，收入下降，信贷消失。资产价格下跌，银行发生挤兑，股票市场下跌，社会紧张加剧。整个过程开始下滑并形成恶性循环。随着收入下降和偿债成本增加，借款人倍感拮据。随着信用消失，信贷枯竭，借款人再也无法借到足够的钱来偿还债务。借款人竭力填补这个窟窿，不得不出售资产。在支出下降的同时，出售热潮使市场充斥待售资产。这时，股票市场暴跌，不动产市场一蹶不振，银行陷入困境。随着资产价格下跌，借款人能够提供的抵押物的价值下降，这进一步降低了借款人的信用。人们觉得自己很穷，信贷迅速消失。</p><p>支出减少、收入减少、财富减少、信贷减少、借债等等随之减少，这是一个恶性循环。它看起来与衰退相似，但不同之处是，无法通过降低利率来挽回局面。在衰退中，可以通过降低利率来刺激借贷。但是，在去杠杆化过程中，由于利率已经很低，接近0，从而丧失刺激功能，因此降低利率不起作用。美国国内的利率在 1930 年的去杠杆化期间下降到 0，在 2008 年也是如此。<strong>衰退与去杠杠化之间的区别在于，在去杠杆化过程中，借贷人的债务负担变得过重，无法通过降低利率来减轻</strong>。贷款人意识到，债务过于庞大，根本无法足额偿还。借款人失去了偿债能力，其抵押物失去价值，他们觉得受到债务的极大伤害，不想再借入更多债务。贷款人停止放贷，借款人停止借贷，整个经济体与个人一样都失去了信用度。</p><h2 id="怎样去杠杠化"><a href="#怎样去杠杠化" class="headerlink" title="怎样去杠杠化"></a>怎样去杠杠化</h2><p>那么应该怎样应对去杠杆化？问题在于，债务负担过重，必须减轻，为此可以采用四种方法。</p><ol><li>个人、企业和政府<strong>削减支出</strong>；</li><li>通过债务违约和重组来<strong>减少债务</strong>；</li><li><strong>财富再分配</strong>，将财富从富人转给穷人；</li><li>央行<strong>发行更多货币</strong>。</li></ol><p>这四种办法被用于现代历史上的每一个去杠杆化过程。通常第一个措施是削减支出，个人、企业、银行和政府都勒紧裤腰带削减支出，从而能够减少债务。我们经常把这称为<strong>紧缩</strong>，当借款人不再借入新的债务，并开始减少旧债务的时候，你会以为债务负担会减轻。但情况刚好相反！支出减少了，而一个人的支出是另一个人的收入，这就导致收入下降。收入下降速度超过还债的速度，因此债务负担实际上更为沉重。我们已经看到，这种削减支出的做法引起通货紧缩，令人痛苦。企业不得不削减成本，这意味着工作机会减少，失业率上升。这导致下一个步骤，即必须减少债务！很多借款人无法偿还贷款。而借款人的债务是贷款人的资产，如果借款人不偿还银行贷款，人们会担心银行无法偿还其存款。因此纷纷从银行去除存款，银行收到<strong>挤兑</strong>，而个人、企业和银行出现<strong>债务违约</strong>。这种严重的经济收缩就是<strong>萧条</strong>。<strong>萧条的一个主要特征是，人们发现，他们原先以为属于自己的财富中有很大一部分实际上并不存在</strong>。</p><p>我们再次以酒吧为例，当你用赊账的办法买一瓶啤酒时，是在承诺今后偿还酒吧的赊账，你的承诺成为酒吧的一项资产。但是，如果你不兑现承诺，不偿还酒吧的赊账，实际上是债务违约。那么酒吧的这项“资产”实际上一钱不值，它实际上是消失了。很多贷款人不希望自己的资产消失，同意债务重组。债务重组意味着贷款人得到的还款减少，或偿还周期延长，或利率低于当时商定的水平。无论如何，合约被破坏，结果是债务减少。贷款人希望多少收回一些贷款，总强过血本无归。债务重组让债务消失，但由于它导致收入和资产价值以更快的速度消失，债务负担继续日趋严重。削减债务和减少支出一样，令人痛苦和导致通货紧缩。所有这些都对中央政府产生影响，因为<strong>收入降低和就业减少意味着政府的税收减少</strong>。于此同时，由于失业率上升，中央政府需要增加支出，很多失业者储蓄不足，需要政府的财务资助。此外，政府制定刺激计划和增加支出，以弥补经济活动的减少。在去杠杠化的过程中，政府的预算赤字飙升，原因是政府的支出超过税收，在新闻中听到的预算赤字正是这种情况。</p><p>政府必须加税或者举债，以填补赤字。但是，在收入下降和很多人失业的时候，应该向谁融资呢？富人。由于政府需要更多的钱，而且大量的财富集中在少数富人的手中。政府自然而然地增加对富人的征税，以帮助经济中的财富再分配。把财富从富人那里转给穷人，正在困苦当中的穷人开始怨恨富人，承受经济疲弱、资产贬值和增税压力的富人开始怨恨穷人。如果萧条继续下去，就会爆发社会动荡。不仅国家内部的紧张加剧，而且国家之间也会这样，债务国和债权国之间尤其如此。这种局势可以导致政治变革，有时是极端的变革。</p><p>1930 年代，这种局势导致希特勒掌权、欧洲爆发战争和美国的大萧条。要求采取行动来结束萧条的压力越来越大。不要忘记，人们心目中的货币实际上大部分是信贷。因此，信贷一旦消失，人们的钱会不够花。人们迫切需要钱，而你一定记得，谁可以发行货币，中央银行可以。央行已经把利率降到接近 0 的水平，现在不得不发行更多货币。<strong>发行货币与削减支出、减少债务和财富再分配不同，会引起通货膨胀和刺激经济</strong>。中央银行不可避免地凭空发行更多货币，并使用这些货币来购买金融资产和政府债券。这种情况发生在美国大萧条期间，并与 2008 年再次爆发，当时美国的中央银行，即联邦储备委员会，增加发行了两万多亿美元，世界各地能够这样做的其他央行也增发了很多货币。央行通过用这些货币购买金融资产，帮助推升了资产价格，从而提高了人们的信用。但是，这仅仅有助于那些拥有金融资产的人，你看央行可以反行货币，但是只能购买金融资产。</p><p>而另一方面，中央政府可以购买商品和服务，可以向人民送钱，但是无法印钞票。因此为了<strong>刺激经济</strong>，央行和政府必须合作央行通过购买政府债券，其实是把钱借给政府，使其能够运行<strong>赤字预算</strong>。并通过刺激计划和失业救济金来增加购买商品和服务的支出，这增加了人们的收入，也增加了政府的债务。但是这个办法将降低经济中的总债务负担，这是一个风险很大的时刻。决策者需要平衡考虑降低债务负担的四种办法。必须平衡兼顾通货紧缩的办法和通货膨胀的办法，以便保持稳定。如果取成适当的平衡，就可以带来<strong>和谐的去杠杠化</strong>。所以说去杠杠化可以是痛苦的，也可以是和谐的。怎样才能实现和谐的去杠杠化? 尽管去杠杠化是艰难的，但以尽可能好的办法来处理艰难的局势却是一件好事。这比杠杠化阶段大量举债产生过度失衡现象要好得多。在和谐的去杠杠化过程中，债务收入比率下降，经济实际上是正增长。同时通货膨胀并不是一个问题，这是通过适当的平衡所取得的。为了取得稳定的平衡，需要结合削减支出、减少债务、转移财富和发行货币的办法以保持经济和社会稳定。</p><p>有人问，发行货币是否会加剧通货膨胀？<strong>如果增发的货币抵消贷款的降幅，就不会引发通货膨胀</strong>。不要忘记，重要的是支出。每一块钱的支出，无论支出的是货币，还是信用，对价格的影响都是一样的。央行可以通过增加货币发行量来弥补消失的信贷。央行为了扭转局面，不仅需要推动收入的增长，而且需要让收入的增长率超过所积累债务的利率，这是什么意思？主要的意思是，<strong>收入一定是比债务增长得快</strong>。</p><p>例如，我们假设有个国家正在经历去杠杠化，其债务收入比率是 100%，这意味着，债务量相当于整个国家一年的收入。假设这些债务的利率是 2%，如果债务以 2% 的利率速度增加而收入的增长率仅有大约 1%，那么债务负担永远不会减轻，必须发行更多货币，是收入增长率超过利率。然而， 发行货币太容易了，而且这个方法比其他方法受欢迎。因此这个方法可能易于滥用。关键是避免像 1920 年代去杠杠化的德国那样发行过多的货币，从而导致恶性通货膨胀。<br>如果决策层取得适当的平衡，去杠杠化过程就不会那样激烈，经济增长速度缓慢，但是债务负担会下降，这就是和谐的去杠杠化。</p><p>当收入上升的时候，借款人的信用度提高。借款人一旦显得更有信用，贷款人就会开始恢复贷款。债务负担终于开始下降，人们可以借到钱，就可以增加消费。经济终于开始恢复增长，长期债务周期从而进入通货再膨胀阶段。去杠杠化如果处理不当，会非常可怕；如果处理得当，最终将解决问题。为了使债务负担下降和经济活动恢复正常，大约需要十年或更长的时间，因此有“<strong>失去的十年</strong>”这种说法。<br>综上所述，经济当然要比这个模式复杂一些。然而，把短期债务周期、长期债务周期和生产率增长轨迹结合起来分析，我们会得到一个不错的模式，可以看清我们在过去和当前的出境以及未来可能的发展方向。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>最后，希望学到三条法则： </p><ul><li>第一，不要让债务的增长速度超过收入，因为债务负担最终将把你压垮。</li><li>第二，不要让收入的增长速度超过生产率，因为这最终将使你失去竞争力。</li><li>第三，尽一切努力提高生产率，因为生产率在长期内起着最关键的作用。<br>学习了。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对经济的兴趣&quot;&gt;&lt;a href=&quot;#对经济的兴趣&quot; class=&quot;headerlink&quot; title=&quot;对经济的兴趣&quot;&gt;&lt;/a&gt;对经济的兴趣&lt;/h1&gt;&lt;p&gt;我原先一直没兴趣关注关系经济学相关的东西。读书时代喜欢更多的热衷于谈论家国大事，总是幻想着仗剑闯天涯，怎么干
      
    
    </summary>
    
    
      <category term="我不知道的事" scheme="http://chenyangguang.github.com/tags/%E6%88%91%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>go 爬虫爬取深圳房源信息</title>
    <link href="http://chenyangguang.github.com/2018-12-07-sz-house/"/>
    <id>http://chenyangguang.github.com/2018-12-07-sz-house/</id>
    <published>2018-12-07T15:28:12.000Z</published>
    <updated>2018-12-09T12:52:49.451Z</updated>
    
    <content type="html"><![CDATA[<p>没事就捣鼓一下爬虫，弄点数据玩一下吧。<br>今天就拿下深圳房源来弄一下。<br>花了半小时加调试正确。</p><p><a href="https://github.com/chenyangguang/hundun/blob/master/sz-house/summary.go" title="深圳房源概况" target="_blank" rel="noopener">深圳房源价格概况</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;没事就捣鼓一下爬虫，弄点数据玩一下吧。&lt;br&gt;今天就拿下深圳房源来弄一下。&lt;br&gt;花了半小时加调试正确。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenyangguang/hundun/blob/master/sz-house/summary
      
    
    </summary>
    
    
      <category term="爬虫" scheme="http://chenyangguang.github.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>考验你的时候到了</title>
    <link href="http://chenyangguang.github.com/2018-12-02-do-it-now/"/>
    <id>http://chenyangguang.github.com/2018-12-02-do-it-now/</id>
    <published>2018-12-02T14:08:09.000Z</published>
    <updated>2018-12-03T13:39:04.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="周末发版"><a href="#周末发版" class="headerlink" title="周末发版"></a>周末发版</h2><p>周六上线, 大版本的升级。虽说不是太大波动但也是一波三折。做个记录吧。可以改进的地方当然还是很多的。<br>昨天还想着总结一下的。但是昨天其他部门折腾到晚上 22:00 多。回到家都 11:30 了, 当时没来得及仔细回顾。洗洗睡了。<br>今天来回顾一下都用了哪些上线操作技巧。</p><h3 id="就位"><a href="#就位" class="headerlink" title="就位"></a>就位</h3><p><em>8:30</em> 我就已经就位了。基本上进入上线的节奏了。但是同时上线的其他部门的四个部门还没有准备好。我需要等其中一个部门的人将与本次需求相关的大概几十万数据发过来, 进行初始化。<br>于是写好上线文档，重新梳理一遍本次开发的源码逻辑，流程。确认顺利走了一遍。将后端单元测试 <em>go test</em> 走一遍。确认开发环境和测试环境下没有问题的。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p><em>9:00</em> 开始细化前一天（周五）与架构师讨论修改之后的文档, 包括数据初始化的改动。本来周五下午我准备封闭将要上线的 dev-feature 功能分支的。但是架构师过了一遍之后。认为我初始化的数据有点问题。主要是初始化不够彻底，留有少许残余的没初始化到。于是我重新修改了两版方案。其中初始化行业和地址字典部分，我改为原先从上传文件走脚本修改，改为导入临时表, 然后使用联表查询，依据不同条件进行批量更新。<br>等初始化的数据，一直催他们，还是没有给到正式线的初始化数据。<br>所以在 <em>15:30</em> 拿到初始化数据之前。我依次做了这几件事情: </p><ol start="0"><li>无关的代码注释，多余的 log 打印去掉。</li><li>合并前端代码，提交版本库。 因为需要拉 node_module 目录，所以提前准备好前端代码镜像。</li><li><p>合并后端go代码，提交版本库待发布分支。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="keyword">master</span> <span class="title"></span></span><br><span class="line"><span class="title">git</span> fetch </span><br><span class="line">git checkout dev-feature</span><br><span class="line">git rebase  <span class="keyword">master</span> <span class="title">-i</span> </span><br><span class="line"><span class="comment"># 然后保留一个功能点的 commint ,其他的 commit 修改为 squash </span></span><br><span class="line"><span class="comment"># 这样可以保证主干分支 master 的干净, 相当于本次 100 个 commit 汇成了一个 commit</span></span><br></pre></td></tr></table></figure></li><li><p>再次细化上线文档。 </p><ul><li>将数据库表变更操作每条将要执行的 sql 按照执行顺序, 按照四个功能块列出来。细化到每一条 sql, 包含变更前的查询和变更后的确认 sql 全补上。 </li><li>初始将修改的功能点 1-7 罗列出来。上线前给架构师再过一遍。架构师确认无误。</li><li>加上接入监控部分详细描述。</li><li>确认要部署的 docker 集群 ip。</li></ul></li><li>提前配置好配置服务器的相关域名，开放端口，各项敏感参数，签名。</li><li>配置线上开放的 API . 发布，申请审核通过之后，进行对应的业务线授权。</li></ol><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>开始所有的数据库操作之前，都先备份。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -<span class="selector-tag">p</span> dbname table_name &gt; table_xxx_20181201.sql</span><br></pre></td></tr></table></figure></p><p><em>16:00</em> 千呼万唤始出来，终于等来了初始化数据。我依次按照我的文档。执行了初始化。一开始收到初始化文件时，想着用 <strong>rsync</strong> 去上传文件的。但是行不通。改为 <strong>rz</strong> 同步初始化数据文件到服务器。然后打算从终端直接导入。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -<span class="selector-tag">p</span> db_name &lt; change.sql</span><br></pre></td></tr></table></figure></p><p>结果不行。又改登陆数据库先进去， 然后<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">source</span> <span class="regexp">/dirpath/</span>change.sql</span><br></pre></td></tr></table></figure></p><p>这下导入了。之后开始加字段,<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ALTER <span class="keyword">TABLE</span> X <span class="comment">ADD COLUMN xxx VARCHAR(50) NOT NULL COMMENT</span> <span class="comment">'XXX'</span>;</span><br><span class="line">UPDATE <span class="keyword">TABLE</span> ...</span><br><span class="line">ALTER <span class="keyword">TABLE</span> ADD <span class="comment">INDEX (</span>`<span class="comment">YYY</span>`<span class="comment">)</span>;</span><br><span class="line">...</span><br><span class="line"># 还有一顿的操作, 按流程文档走。</span><br></pre></td></tr></table></figure></p><p>初始化历时 30 分钟左右。<br>此时已经 <em>16:30</em> 左右了! 根据上线次序，必须其他三个部门全部上线完，我才能上线。但是其中的一个部门还在初始化。<br>然后继续等。结果，等到了晚上快 20:00 点，才等来了消息: 其他部门初始化完成了，这下我才可上线。在这中间，我又把本次接入的出入的接口加上监控项目。这样，代码一上线，我就可以开始变看日志，边看监控发现存在的问题了。</p><h3 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h3><p>于是我用了 7 秒就把后端所有的镜像部署上去了。为啥？因为我在等待其他部门操作期间，把所有的镜像都准备好了。万事俱备，只欠灭霸的一个响指了。哦，好像哪里不对啊。<br>紧接着又上线前端的容器。<br>看日志，发现有一个错误级别的。反馈是数据库有一个字段找不到！这个字段是第八版本中修改的！赶紧加上。这回后续时间内那个错误级别日志消失了。<br>然后联合线上回归。又发现几个问题。马上跟进！<br>原来其中有一个问题是我这边的，有一个表的有关时间字段设置的 int(11) 没有 UNSIGNED ! 长度不够。所以我改了一下这个字段长度。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">CHANGE</span> <span class="string">`x_column`</span> <span class="string">`x_column`</span> <span class="built_in">int</span>(<span class="number">11</span>)  <span class="keyword">UNSIGNED</span>  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'过期时间'</span>;</span><br></pre></td></tr></table></figure></p><p>然后再验，还是不够。原来另一个接口返回的时间戳是精确到毫秒级的时间戳， 从 2147483647 扩大到 4294967295还是不够。所以我改为 bigint 之后才行。<br>其他问题，协助他们验证的线上的 bug 进行日志跟进。依次都化解了。</p><p>验证完，都已经 22:00 了。<br>然后就坐地铁回家了!</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>永远准备好应对任何来自生产环境的异常问题。生产环境和测试环境不可能完全一致, 只能无限逼近。 </li><li>单元测试能多写就多些，必要的加上压测。</li><li>操作流程要清晰。</li><li>要有全局观。</li><li>响应要一直保持足够快。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;周末发版&quot;&gt;&lt;a href=&quot;#周末发版&quot; class=&quot;headerlink&quot; title=&quot;周末发版&quot;&gt;&lt;/a&gt;周末发版&lt;/h2&gt;&lt;p&gt;周六上线, 大版本的升级。虽说不是太大波动但也是一波三折。做个记录吧。可以改进的地方当然还是很多的。&lt;br&gt;昨天还想着总结一
      
    
    </summary>
    
    
      <category term="计算机技术" scheme="http://chenyangguang.github.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>混沌？馄炖?</title>
    <link href="http://chenyangguang.github.com/2018-11-28-hundun/"/>
    <id>http://chenyangguang.github.com/2018-11-28-hundun/</id>
    <published>2018-11-28T14:16:13.000Z</published>
    <updated>2018-11-28T14:59:02.975Z</updated>
    
    <content type="html"><![CDATA[<p>闲来没事，看了下 <a href="https://github.com/gocolly/colly" title="colly" target="_blank" rel="noopener">gocolly</a>，练手搞一个爬虫，搂了一遍最新的腾讯官网的招聘信息。<br>这种不需要登陆的网站是最容易爬到的。<br>很简单，还是给自己小结过一下。</p><p>因为无须登陆，所以这条虫子几乎是官网的基础的例子<br>使用 Chrome 浏览器打开<a href="https://hr.tencent.com" title="tx" target="_blank" rel="noopener">腾讯招聘官网</a>,  <em>F12</em>, 随便在搜索框里面输入一点比如 go, 就进入一个分页的搜索结果列表页。定位到招聘的职位那几栏，发现是用的 table 框起来的。找官网的基本例子依样画葫芦。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">c</span><span class="selector-class">.OnHTML</span>(<span class="string">"#position tbody tr"</span>, func(e *colly.HTMLElement) &#123;</span><br><span class="line">       <span class="selector-tag">writer</span><span class="selector-class">.Write</span>([]string&#123;</span><br><span class="line">           <span class="selector-tag">e</span><span class="selector-class">.ChildText</span>(<span class="string">"td:nth-child(1)"</span>),</span><br><span class="line">           <span class="selector-tag">e</span><span class="selector-class">.ChildText</span>(<span class="string">"td:nth-child(2)"</span>),</span><br><span class="line">           <span class="selector-tag">e</span><span class="selector-class">.ChildText</span>(<span class="string">"td:nth-child(3)"</span>),</span><br><span class="line">           <span class="selector-tag">e</span><span class="selector-class">.ChildText</span>(<span class="string">"td:nth-child(4)"</span>),</span><br><span class="line">           <span class="selector-tag">e</span><span class="selector-class">.ChildText</span>(<span class="string">"td:nth-child(5)"</span>),</span><br><span class="line">           <span class="selector-tag">e</span><span class="selector-class">.ChildAttr</span>(<span class="string">"a"</span>, <span class="string">"href"</span>),</span><br><span class="line">       &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果爬取的结果除了想要的那些 tr 行之外，表头和地步的分页的数据也给弄进去了。<br>这不是我想要的，决定过滤一下。于是改进一下小版本的只搂需要的选项。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">c</span><span class="selector-class">.OnHTML</span>("<span class="selector-id">#position</span> <span class="selector-tag">tbody</span> <span class="selector-tag">tr</span>", <span class="selector-tag">func</span>(<span class="selector-tag">e</span> *<span class="selector-tag">colly</span><span class="selector-class">.HTMLElement</span>) &#123;</span><br><span class="line"><span class="attribute">itemClass </span>:= e.<span class="built_in">Attr</span>(<span class="string">"class"</span>)</span><br><span class="line">if strings.<span class="built_in">EqualFold</span>(itemClass, <span class="string">"even"</span>) || strings.<span class="built_in">EqualFold</span>(itemClass, <span class="string">"odd"</span>) &#123;</span><br><span class="line">writer.<span class="built_in">Write</span>([]string&#123;</span><br><span class="line">e.ChildText(<span class="string">"td:nth-child(1)"</span>),</span><br><span class="line">e.<span class="built_in">ChildText</span>(<span class="string">"td:nth-child(2)"</span>),</span><br><span class="line">e.<span class="built_in">ChildText</span>(<span class="string">"td:nth-child(3)"</span>),</span><br><span class="line">e.<span class="built_in">ChildText</span>(<span class="string">"td:nth-child(4)"</span>),</span><br><span class="line">e.<span class="built_in">ChildText</span>(<span class="string">"td:nth-child(5)"</span>),</span><br><span class="line">e.<span class="built_in">ChildAttr</span>(<span class="string">"a"</span>, <span class="string">"href"</span>),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>只爬一页不够啊，我需要全部的招聘信息，然后再加一下获取下一页的链接。让它爬完一页之后接着下一页，直到爬完所有的招聘。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">c</span><span class="selector-class">.OnHTML</span>("<span class="selector-id">#next</span>", <span class="selector-tag">func</span>(<span class="selector-tag">h</span> *<span class="selector-tag">colly</span><span class="selector-class">.HTMLElement</span>) &#123;</span><br><span class="line"><span class="attribute">t </span>:= donain + h.<span class="built_in">Attr</span>(<span class="string">"href"</span>)</span><br><span class="line">log.<span class="built_in">Printf</span>(t)</span><br><span class="line">c.<span class="built_in">Visit</span>(t)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样一来就拿到腾讯官网全量的数据了。<br>还是向 shawjia 学习，多提交一些自己的开源项目, 哪怕是最基本的练手的项目。<br>今天是个开始，这顿 <a href="https://github.com/chenyangguang/hundun" title="馄炖" target="_blank" rel="noopener">馄炖</a> 就是个见证。(一直不知道开始的项目应该叫啥名，索性就处在混沌之中吧。) </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;闲来没事，看了下 &lt;a href=&quot;https://github.com/gocolly/colly&quot; title=&quot;colly&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;gocolly&lt;/a&gt;，练手搞一个爬虫，搂了一遍最新的腾讯官网的招聘信息。&lt;br
      
    
    </summary>
    
    
      <category term="go" scheme="http://chenyangguang.github.com/tags/go/"/>
    
      <category term="代码" scheme="http://chenyangguang.github.com/tags/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Emacs as golang IDE</title>
    <link href="http://chenyangguang.github.com/2018-11-27-ide/"/>
    <id>http://chenyangguang.github.com/2018-11-27-ide/</id>
    <published>2018-11-27T15:43:40.000Z</published>
    <updated>2018-11-28T21:53:35.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><p>据我观察，很多程序员们喜欢 IDE 的原因在于工程化全局查询，函数定义, 复制粘贴， 其他的模块化插入代码块，是没有太多吸引力的。</p><h2 id="作为-Go-开发-IDE"><a href="#作为-Go-开发-IDE" class="headerlink" title="作为 Go 开发 IDE"></a>作为 Go 开发 IDE</h2><p><a href="https://github.com/syl20bnr/spacemacs/tree/master/layers/%2Blang/go" title="ide" target="_blank" rel="noopener">emacs as golang ide</a> 这里有基本的配置。<br><em>godef</em> 安装一下可以解决函数定义的出处查找问题。没事就来一下: <em>C-c C-j</em>, 立马追到底。包括 <em>go/src/</em> 目录也能追杀到底。<br>查找使用 Emacs 本身的查找 <em>find-grep</em> 命令快的不行, 老方式： <em>Alt+x find-grep 要查询的关键字</em> 。效果图如下：<br><img src="/2018-11-27-ide/emacs-command.png" alt="emacs-command" title="emacs-command"></p><p>从上面的效果途中可以看到很多中查找方式，如果要在当前工程目录找，可以使用 <em>projectle-grep</em> 这个命令。<br>解决了这几个问题。Emacs 用来写代码不是一般的爽。有一种上瘾的感觉。特别是 spacemacs 兼顾了 VIM 与 Emacs 两者的长处。不多说了，先让代码飞一会儿!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;IDE&quot;&gt;&lt;a href=&quot;#IDE&quot; class=&quot;headerlink&quot; title=&quot;IDE&quot;&gt;&lt;/a&gt;IDE&lt;/h2&gt;&lt;p&gt;据我观察，很多程序员们喜欢 IDE 的原因在于工程化全局查询，函数定义, 复制粘贴， 其他的模块化插入代码块，是没有太多吸引力的。&lt;
      
    
    </summary>
    
    
      <category term="Emacs" scheme="http://chenyangguang.github.com/tags/Emacs/"/>
    
  </entry>
  
  <entry>
    <title>使用org-mode管理自己的日常计划目标</title>
    <link href="http://chenyangguang.github.com/2018-11-25-i-do-not-know/"/>
    <id>http://chenyangguang.github.com/2018-11-25-i-do-not-know/</id>
    <published>2018-11-25T12:50:51.000Z</published>
    <updated>2018-12-09T03:19:20.381Z</updated>
    
    <content type="html"><![CDATA[<h2 id="org-mode杂事"><a href="#org-mode杂事" class="headerlink" title="org-mode杂事"></a>org-mode杂事</h2><p>使用org-mode有些时日了。整理一下最简单的日常使用方式。</p><h3 id="自助服务"><a href="#自助服务" class="headerlink" title="自助服务"></a>自助服务</h3><p>因为我是用的是 <a href="http://spacemacs.org/" title="spacemacs" target="_blank" rel="noopener">spacemacs</a>, 所以如果是 <strong>org-mode</strong> 相关的指令，是可以直接使用 <strong>Alt+X</strong> 调起这些命令去执行的。或者直接 <strong>Ctrl+h org</strong> 看下帮助文档。<br><img src="/2018-11-25-i-do-not-know/org.png" alt="org-help" title="org-help"></p><h3 id="GTD"><a href="#GTD" class="headerlink" title="GTD"></a>GTD</h3><p>GTD就是Getting Things Done。以目标为导向去完成计划。可以配合番茄闹钟工作，更有疗效。</p><h3 id="我的org-mode在干什么"><a href="#我的org-mode在干什么" class="headerlink" title="我的org-mode在干什么"></a>我的org-mode在干什么</h3><p>我每天的计划是每天做三件值得做的事，外加一个小结。其中每件事按照A、B、C分三个由高到低的轻重缓急层级，并且设置开始做的时间点和截止时间点，完成时会补录结束之间。Like this:<br><img src="/2018-11-25-i-do-not-know/my-org.png" alt="my-org" title="my-org-png"></p><h3 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h3><p><a href="https://lucaseo.github.io/2018/02/20/howtodo-20180220-1/" title="here" target="_blank" rel="noopener">Here</a> 有一篇文章教怎么在 <em>Hero</em> 的博客的 <strong>source/_post/对应文章路径</strong> 中 弄进来一张自定义的图片。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;org-mode杂事&quot;&gt;&lt;a href=&quot;#org-mode杂事&quot; class=&quot;headerlink&quot; title=&quot;org-mode杂事&quot;&gt;&lt;/a&gt;org-mode杂事&lt;/h2&gt;&lt;p&gt;使用org-mode有些时日了。整理一下最简单的日常使用方式。&lt;/p&gt;
&lt;h
      
    
    </summary>
    
    
      <category term="Emacs" scheme="http://chenyangguang.github.com/tags/Emacs/"/>
    
      <category term="我不知道的事" scheme="http://chenyangguang.github.com/tags/%E6%88%91%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>周末</title>
    <link href="http://chenyangguang.github.com/2018-11-11-weekenday/"/>
    <id>http://chenyangguang.github.com/2018-11-11-weekenday/</id>
    <published>2018-11-11T13:24:23.000Z</published>
    <updated>2018-11-18T10:01:44.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="双十一什么的"><a href="#双十一什么的" class="headerlink" title="双十一什么的"></a>双十一什么的</h2><p>  好像跟我没啥关系, 这一天花了50块钱，周末了，吃饭加水果。想买个Bose QC 35,  要2000+,AirPods 也需要至少1200+, 暂时算了。还没到时候。</p><h2 id="写博客的理由"><a href="#写博客的理由" class="headerlink" title="写博客的理由"></a>写博客的理由</h2><p>  与其说是写博客的理由，还不如说是梳理自己思路的方式吧。不为谁看，谁不看。任凭自己的思路铺展开来，想到哪里，就写到哪里，不必像儿时的语文课作文，不必像高考的证明题，也不像大学毕业设计。总之，我现在想的是什么，就写什么。无需关心点赞，更不用管什么转发量。</p><h2 id="近期锻炼侧重"><a href="#近期锻炼侧重" class="headerlink" title="近期锻炼侧重"></a>近期锻炼侧重</h2><p>  由于脚髁的皮外伤还没有完全好，最近调整了锻炼的侧重比例, 增加了平板支撑的科目。人的身体的中心在腰腹部，所以需要将身体的核心位置练强壮一点。平板支撑锻炼的身体的核心肌肉群, 经过一段时间早晚锻炼，目前单次最长可以支撑到90s了。每日两次，每次三组，加起来一天差不多12分钟。</p><h2 id="无惧野狐3段了"><a href="#无惧野狐3段了" class="headerlink" title="无惧野狐3段了"></a>无惧野狐3段了</h2><p>一年前，我还是野狐一段水准。9月份开始，对战野狐2段我已经有了超过70%的胜率了。10月份甚至达到过4段, 但是很不稳定，从2段上去，一段时间连胜，一段时间连败，反反复复，很不稳定, 所以还是3段中的水平吧。后来分析了一下，是复盘很少。目前腾讯围棋的绝艺复盘，已经开放给大众了。一天下两盘，可以收获4个积分，5个积分可以申请一次绝艺复盘, 查看了自己的一下胜率分布，发现赢的多数是我逆转的棋。进入了11月份之后，对战3段，已经有了60%的胜率了。但是我现在坚持一天最多下两盘质量局。希望多一点时间发现自己薄弱的环节，比如布局，贴身格斗。争取在年底前，能将棋力提升至4段中上的实力稳定线上。</p><h2 id="行走"><a href="#行走" class="headerlink" title="行走"></a>行走</h2><p>  我个人感觉，自已最有想法的时候，往往是在路上。在行走的路上，一边走，一边由着思绪散开，漂流。任它们游走，旋转，重装，组合，平时工作日里面种种困顿烦扰的问题，随着路途的遥远慢慢蒸发，随着海拔的提升渐渐稀释，随着时间的运转徐徐淡色。我喜欢行走，到目前为止，我人生中的几次重大选择都是在极目远眺的行走时拿定主意的。<br>  五岳中，还有西岳华山，北岳恒山，中岳嵩山没有涉足。年底前找个时间去一趟，看看。有个同事会问我，我看你那么喜欢去爬山，但是你说你，爬完回来也没啥变化啊。是啊，爬一座山，可能真的没啥变化的。但是我能出去看看别的地方的真实的存在，涨涨见识。突然想到以前看到的有个登上喜玛拉雅山顶的人说的：“因为山就在哪里”。“这能长什么见识，爬山就能长见识啊”？ 我一时无语。好比看一本书，我很可能读完，会感觉没啥收获啊，那我下次还会不会读书呢？会。为什么？因为无论你觉得或者不觉得，我经历过的事情，会对我的认知，对我的世界观，人生观有一个看不见的作用。没法预料哪一个瞬间，你就想到曾见过的一朵盛开的蓝莲花，也没准哪一个时刻，就会浮现雪山上的石头缝里的一株野草, 也没准某个夜深人静的时候，就勾勒起野营时漫天的繁星。它们已经埋在我的记忆里，根植于我的血脉里。它们告诉我，岁月流逝，生命坚韧，星空浩瀚。而我见识过繁花的一瞬，我手抚过山巅上的流云，我迎过高空的日升日落。这就是我关闭朋友圈半年来, 真实的活过, 思考过。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;双十一什么的&quot;&gt;&lt;a href=&quot;#双十一什么的&quot; class=&quot;headerlink&quot; title=&quot;双十一什么的&quot;&gt;&lt;/a&gt;双十一什么的&lt;/h2&gt;&lt;p&gt;  好像跟我没啥关系, 这一天花了50块钱，周末了，吃饭加水果。想买个Bose QC 35,  要2000+
      
    
    </summary>
    
    
      <category term="点滴" scheme="http://chenyangguang.github.com/tags/%E7%82%B9%E6%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>十月</title>
    <link href="http://chenyangguang.github.com/2018-10-31-october/"/>
    <id>http://chenyangguang.github.com/2018-10-31-october/</id>
    <published>2018-10-30T23:50:58.000Z</published>
    <updated>2018-11-03T16:00:30.560Z</updated>
    
    <content type="html"><![CDATA[<h2 id="十月就这样过去了"><a href="#十月就这样过去了" class="headerlink" title="十月就这样过去了"></a>十月就这样过去了</h2><p>国庆节期间一双拖鞋，两天，反穿武功山。<br>还是喜欢以前一边徒步一边记笔记好玩。那样能记录实时的真的感受。现在是拍拍风景照，发发群，吹吹水，就这么过去了。</p><h2 id="第一次滑旱冰"><a href="#第一次滑旱冰" class="headerlink" title="第一次滑旱冰"></a>第一次滑旱冰</h2><p>月底时，部门组织的活动，人生中的第一次滑旱冰。摔了差不多十个狗吃屎。还把脚踝外部磨破了一块皮。搞得好几天没结痂。连游泳跑步也不行了。还是保护自己不周到, 以后得注意了。</p><h2 id="定投"><a href="#定投" class="headerlink" title="定投"></a>定投</h2><p>10月11号开始定投。开始管理自己的工资了。以前从来没有投资过，这次长期定投预计是2-3年。目前累计收益6.82%, 午餐可以加几个鸡蛋了。定投需要耐心，买到指数基金。买的是趋势，买的是国运。</p><h2 id="开发业务"><a href="#开发业务" class="headerlink" title="开发业务"></a>开发业务</h2><p>加班太多，领导找去谈话了。其实我完全没必要加班的。但是白天处理的杂事太多，而且需要#bug修复的多，主干开发白天时间严重不够。另外就是白天来得早啊，晚上7，8点回去，都记加班到10小时，11小时了, 这个怎么算了。</p><h2 id="年底前定个小目标吧"><a href="#年底前定个小目标吧" class="headerlink" title="年底前定个小目标吧"></a>年底前定个小目标吧</h2><p>年点前，开发一款能平台通用的应用产品并上线。<br>名字还没想好。初步采用 weex 来写。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;十月就这样过去了&quot;&gt;&lt;a href=&quot;#十月就这样过去了&quot; class=&quot;headerlink&quot; title=&quot;十月就这样过去了&quot;&gt;&lt;/a&gt;十月就这样过去了&lt;/h2&gt;&lt;p&gt;国庆节期间一双拖鞋，两天，反穿武功山。&lt;br&gt;还是喜欢以前一边徒步一边记笔记好玩。那样能记录
      
    
    </summary>
    
    
      <category term="点滴" scheme="http://chenyangguang.github.com/tags/%E7%82%B9%E6%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>记一个API20倍性能优化</title>
    <link href="http://chenyangguang.github.com/2018-09-24-optimize/"/>
    <id>http://chenyangguang.github.com/2018-09-24-optimize/</id>
    <published>2018-09-23T23:29:45.000Z</published>
    <updated>2018-09-24T08:39:01.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><p>我接手的其中一个项目中，有一个核心的业务是提供用户信息同步功能。这个同步API后头还连着其他关联业务，比如创建账号，查询信息，下载信息等。</p><h2 id="历史问题"><a href="#历史问题" class="headerlink" title="历史问题"></a>历史问题</h2><p>这个业务历史悠久，主要是为各产品部门调用该接口，上传用户信息, 提供线上服务做支撑。而这个同步接口，从上线到目前为止，已经优化了35个版本！目前性能为： 同步26000个用户信息，耗时45分钟左右。调用方也是经常用到心里发毛。所以现在交到我手上了。</p><h2 id="动手"><a href="#动手" class="headerlink" title="动手"></a>动手</h2><ul><li>了解需求 沟通, 游走各个关口。 读源码， 画流程图。</li><li>调查问题瓶颈, 监控系统(prometheus)分析响应时间，耗时。 断点设置，日志，数据库统计耗时。</li><li>开会讨论, 讨论痛点，下决心，职责划分，争论方案。</li><li>开会讨论, 下决心, 职责划分，争论方案。</li><li>开会讨论, 定方案, 开发周期，拉一个架构师和技术副总监一起过。</li><li>边写测试单例，边构思。</li><li>开会, 了解进度，方案可行性。</li><li>完成本地批量测试, 模拟客户端访问。引入 golang 自带的 pprof 工具。</li><li>重构数据库, 优化表结构，加索引等。</li><li>重构分支流程, 码代码。</li><li>开发集中。中间又出几个问题，又来了几次会议，不断切遇到的问题，以及之前问题的盲点，逐一条出解决方案。</li><li>合并</li><li>单元测试</li><li>压测</li></ul><h2 id="优化点"><a href="#优化点" class="headerlink" title="优化点"></a>优化点</h2><ul><li>数据库表调整，添加索引。</li><li>同步阶段，断开一个占用耗时将近1/3的外部接口,将外部接口交互流程滞后执行。</li><li>批量处理，单个用户的信息，批次查询，然后本地计算，最后批量入库。</li><li>合理地利用goroutine。</li><li>等。</li></ul><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>  部署到测试环境, 26000个用户月50s内同步完。优化后版本同步速度获得约20倍质的提升!暂时做个笔记吧。这个版本部分工作，是在“山竹”台风到达那天完成的。还好人没事,凌晨从公司回到了家。<br>线上的性能，待我上线确认之后再更新。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>遇到问题，找到病因，对症下药，合理使用开源工具(比如 prometheus 和 pprof 在分析瓶颈中发挥重要的作用)。每一个解决掉的问题，都是我下一步前进的动力。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;同步&quot;&gt;&lt;a href=&quot;#同步&quot; class=&quot;headerlink&quot; title=&quot;同步&quot;&gt;&lt;/a&gt;同步&lt;/h2&gt;&lt;p&gt;我接手的其中一个项目中，有一个核心的业务是提供用户信息同步功能。这个同步API后头还连着其他关联业务，比如创建账号，查询信息，下载信息等。&lt;
      
    
    </summary>
    
    
      <category term="Web" scheme="http://chenyangguang.github.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>泰山观日出</title>
    <link href="http://chenyangguang.github.com/2018-08-27-taishan/"/>
    <id>http://chenyangguang.github.com/2018-08-27-taishan/</id>
    <published>2018-08-27T15:15:21.000Z</published>
    <updated>2018-09-24T04:35:46.298Z</updated>
    
    <content type="html"><![CDATA[<h1 id="出发"><a href="#出发" class="headerlink" title="出发"></a>出发</h1><p>我愿追随自己年轻时的血气方刚，再来几次出发，远行。</p><h2 id="半夜闹钟"><a href="#半夜闹钟" class="headerlink" title="半夜闹钟"></a>半夜闹钟</h2><p>上周六2018-08-25，怕半夜赶不上车，弄了3:00,3:30，4:00的闹钟。好在及时在第一波闹钟的提醒里起来。赶在4:20到了机场。</p><h2 id="飞机"><a href="#飞机" class="headerlink" title="飞机"></a>飞机</h2><p>在这个城市四年了，我是第一次到这个机场。一开始我以为自己时间还是挺多的。但是只是好奇了几下这里候机的来来往往的人，心里暗暗感叹了一会机场的穹顶，一路从安检走到登机口，感觉绕过过了两个操场。<br>早上6:10的飞机。<br>头一次总飞机。那个心情真的是, 好爽啊。特别是一面忐忑着，一面又极其激动地坐着飞机，轰隆隆地在跑道上奔着，地面的草向后面越来越快的划退，奔着奔着，后背一靠，前头拔高，脚底感觉有一股厚实的板顶着，飞起来了！要上天了！</p><h2 id="济南的夏天"><a href="#济南的夏天" class="headerlink" title="济南的夏天"></a>济南的夏天</h2><p>热。</p><h2 id="泰安的小饭馆"><a href="#泰安的小饭馆" class="headerlink" title="泰安的小饭馆"></a>泰安的小饭馆</h2><p>香，实惠的小菜。</p><h1 id="泰山"><a href="#泰山" class="headerlink" title="泰山"></a>泰山</h1><p>泰山北斗，可不是比衡山难爬嘛! 十八盘。。。。。。， 给我多来几盘。</p><h2 id="日出"><a href="#日出" class="headerlink" title="日出"></a>日出</h2><p>山顶扎一小帐篷，租一军大衣。本以为可以好好地在石板地上睡到第二天至少4点吧。。。。。。, 谁知道凌晨1点之后，陆续地帐篷周边热闹起来，压根睡不着觉。打游戏的，聊天的，嬉戏的，吃东西的，喊冷的，哼小曲的，小孩哭闹的。。。。。。许多观日出的人不远万里的，赶来等日出的好日子。4点起来，想找个位置，附近的所有能站人的石头面，都被人占着了。。。。。。后来绕树丛里，钻爬到一处人少的稍险的高台上。占着。<br>5点半左右，出来了!<br>日出时，天际的云海光影和初生的圆盘, 真的是不可阻挡, 那种透射出来的光芒柔韧而坚实。三个山头的人禁不住齐齐呐喊一阵。各种手机姿势抬着，留下在泰山上的非凡的金色映像中。</p><h2 id="趵突泉"><a href="#趵突泉" class="headerlink" title="趵突泉"></a>趵突泉</h2><p>三个大泉眼。</p><h2 id="老舍纪念馆"><a href="#老舍纪念馆" class="headerlink" title="老舍纪念馆"></a>老舍纪念馆</h2><p>那个老舍的房子好封闭！”济南的冬天”就是在这样的院子里写出来的吗？好怀念那个时代的人对天地人的感受。</p><h1 id="在路上"><a href="#在路上" class="headerlink" title="在路上"></a>在路上</h1><p>不断行走，在路上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;出发&quot;&gt;&lt;a href=&quot;#出发&quot; class=&quot;headerlink&quot; title=&quot;出发&quot;&gt;&lt;/a&gt;出发&lt;/h1&gt;&lt;p&gt;我愿追随自己年轻时的血气方刚，再来几次出发，远行。&lt;/p&gt;
&lt;h2 id=&quot;半夜闹钟&quot;&gt;&lt;a href=&quot;#半夜闹钟&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="行万里" scheme="http://chenyangguang.github.com/tags/%E8%A1%8C%E4%B8%87%E9%87%8C/"/>
    
  </entry>
  
  <entry>
    <title>衡山</title>
    <link href="http://chenyangguang.github.com/2018-08-19-hengshan/"/>
    <id>http://chenyangguang.github.com/2018-08-19-hengshan/</id>
    <published>2018-08-19T14:50:51.000Z</published>
    <updated>2018-09-24T04:35:46.297Z</updated>
    
    <content type="html"><![CDATA[<h1 id="衡山我来了"><a href="#衡山我来了" class="headerlink" title="衡山我来了"></a>衡山我来了</h1><p>初次听说衡山，是初二时学地理, 要考试，背书，弄了个顺口溜:”东西南北中，秦华衡恒嵩”。而且，这五座自古为游人津津乐道的心目中的憧憬，到底是晚来得太久了。<br>这次跑往衡山来爬。并不是想扎人堆，而是想出来散散心, 走走，舒展舒展筋骨。</p><h2 id="太庙"><a href="#太庙" class="headerlink" title="太庙"></a>太庙</h2><p>入乡随俗，上山前，到太庙烧一炷香，拜一扣佛。</p><h2 id="南天门"><a href="#南天门" class="headerlink" title="南天门"></a>南天门</h2><p>西面大风夹着云雾沿着南天门的山脊，扇吹过来，将衡山一分为二。</p><h2 id="祝融峰"><a href="#祝融峰" class="headerlink" title="祝融峰"></a>祝融峰</h2><p>到顶了。</p><h2 id="累了"><a href="#累了" class="headerlink" title="累了"></a>累了</h2><p>到过，这是起点。<br>过了，不想写了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;衡山我来了&quot;&gt;&lt;a href=&quot;#衡山我来了&quot; class=&quot;headerlink&quot; title=&quot;衡山我来了&quot;&gt;&lt;/a&gt;衡山我来了&lt;/h1&gt;&lt;p&gt;初次听说衡山，是初二时学地理, 要考试，背书，弄了个顺口溜:”东西南北中，秦华衡恒嵩”。而且，这五座自古为游人津津乐
      
    
    </summary>
    
    
      <category term="行万里" scheme="http://chenyangguang.github.com/tags/%E8%A1%8C%E4%B8%87%E9%87%8C/"/>
    
  </entry>
  
  <entry>
    <title>holiday</title>
    <link href="http://chenyangguang.github.com/2018-06-18-holiday/"/>
    <id>http://chenyangguang.github.com/2018-06-18-holiday/</id>
    <published>2018-06-18T14:15:05.000Z</published>
    <updated>2018-09-24T04:35:46.298Z</updated>
    
    <content type="html"><![CDATA[<h2 id="澳门半天-2018-06-16"><a href="#澳门半天-2018-06-16" class="headerlink" title="澳门半天(2018-06-16)"></a>澳门半天(2018-06-16)</h2><p>平日锁在一个笼子一样的办公室，今日看了半天书，心里烦闷，翻箱倒柜中，发现港澳通行证还要次数。于是买个 14:30 的船票一路从蛇口出发，往澳门去了。目标是观光塔。一路中有几件事蛮有意思的。记一下。</p><h3 id="第一件-奇怪的身边船客。"><a href="#第一件-奇怪的身边船客。" class="headerlink" title="第一件, 奇怪的身边船客。"></a>第一件, 奇怪的身边船客。</h3><p>本来我的船票是二楼第二排靠窗的，结果有个穿厚外套的老者先到，坐到我的位置去了。等我上去示意他坐了我的舱位时，他说他想坐舷窗，要和我换。我想着照顾老人，那算了。原本我也想靠外坐，看海景方便些。后来他就一直用手机看信息去了。直到我中间拿出《区块链原理、设计与应用》的书看上一段时间。他趁我翻页时，要借书看看封面和目录，随手翻了下。然后眼睛一亮，说道：“这本书可不可以借我一分钟拍个照”？我有点楞，但马上回过神来：“行，你要想看，你先拿去看吧。没事，我回去可以接着看的”。他赶紧解释：“哦，那倒不用，我想借来拍几张”。“可以，可以。给”。我就看他那眼睛像瞄上一个猎物一样。拿着这书，快速翻着，拍了几张。然后按下一个语音按钮，对着手机发起语音来：“张秘书，我刚才给你发一本书的图片过去，你去下个单，……另外，调研一下，是否还有没有同类的书，照着订几套，。。。。。。先订１０套，xxx级别以下的都让他们先学习学习。好吧。。。。。。”。有些其他的话就记不清了。总之，可以听出来，我后边舷窗的这位，可不是一个平常的游客！而且，仅凭船上一个游客看的书，他怎么就马上叫人下单去？这让我百思不得其解。可见这个人，对前沿技术或者对市场有着某种嗅觉。这个有点令我感到意外。</p><h3 id="第二件，233米高空漫步。"><a href="#第二件，233米高空漫步。" class="headerlink" title="第二件，233米高空漫步。"></a>第二件，233米高空漫步。</h3><p>在路上就很期待此次行程有所心理突破的。233米，我是奔着那个蹦极来的。车从桥上横渡海岸时，就远远看着这个观光塔了。塔身是个多变型，塔尖下方有一个圆环型观光台。有一侧斜拉着两条锁绳。坐电梯上去，透过玻璃门，看到地面逐渐下沉，心里开始打鼓了。到了58层时，靠着玻璃窗户，站在那些透明的板上，看着西面的车那么小，人影那么小。生怕自己掉下去了。蹦极的人，从上面双手伸展，打个十字，嘶喊着前倾倒下来，58层的人群围拢起来，一起探头出去看。哈哈，我的心里想：这些人啊。。。。。。<br>61层。正是各种活动的入口。拿来一张价格表。好贵！那个蹦极要4000多澳元！只有一个太空漫步是三位数的。780澳元。(出门如果没兑换，到了景点一律是 1:1 汇率兑换，略亏)<br>囊中羞涩，最后，只玩了一个太空漫步。夕阳西下，233米高空跨出边沿往下看，还是有些怕。多看了几次之后，坐了一些动作。就坐在边沿上看往下探。深呼吸几次。终于不怕了。哈哈哈哈。蛮有趣！<br>中间有个插曲，是东西存放柜子时，发现只能用 30 港元，结果只能去兑换。刚兑换完，然后一个长的很清秀的妹子没带现金，正要找那些开发票的人沟通，说是票买了，但是没有现金无法开柜存包，结果开发票的给建议向我借点，然后转给我。我说我们直接用一个箱子放得了。我手机快没电了，向她借了充电宝。然后她就去蹦极去了！真会玩。胆儿也太肥了！<br>高空漫步结束后，坐上面又看了十几页《区块链原理、设计与应用》。等她跳完回来时，瞄了她一眼，很平静。那一刻，感觉那个妹子好漂亮啊。然后，就把箱子的东西还她。互相道谢之后，各自奔自己的行程去了。因为超时了，她要转账，我说当充电费了。然后，就没然后了。</p><h2 id="珠海海洋王国一天-2018-06-17"><a href="#珠海海洋王国一天-2018-06-17" class="headerlink" title="珠海海洋王国一天(2018-06-17)"></a>珠海海洋王国一天(2018-06-17)</h2><p>在珠海休正，一大早就去深圳最大的两个公园山顶看了。感觉珠海是个宜居不宜游的城市，不知道是放假还是人口本来就少，感觉这里的压力，应该比深圳小很多。行人走路都那么悠闲。<br>坐公交往珠海最南端出发。那里是长隆。<br>坐过深圳的木质过山车，这里的过山车，全程没太大感觉。甚至失重感也不是那么强烈。可能和前一天的澳门高空漫步有点关系。<br>海豚和白鲸剧场表演，让人感叹，动物很奇妙。<br>各种海底生态中才有的动物，在这里看到了。最震惊的还是水母。追逐光ppppp的神奇动物。<br>我在想，为啥这里的馆能做到那么大，那些生态怎么维持？那么多海底动物在里面，怎么维持平衡？怎么喂食所有的动物呢？水的循环做的很好。水质很干净。<br>然后，今天还碰到了昨天和我存放一柜子背包的那个妹子。她和她男朋友一块儿也到这里游玩来了。太巧了。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>旅途中，最重要的就是接触来自不同世界，说着不同语言的人。不少有着奇幻之旅的游客，不远万里，汇到一起，然后又散去。<br>然后，在路上，遇到妹子的概率比宅在家里，要高很多。<br>世界很大, 不可思议的事情，不同寻常的人很多，很多。<br>常出去走走。<br>应该像以前去西藏一样，将路上所有的所思所想都记录下来。很有意思。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;澳门半天-2018-06-16&quot;&gt;&lt;a href=&quot;#澳门半天-2018-06-16&quot; class=&quot;headerlink&quot; title=&quot;澳门半天(2018-06-16)&quot;&gt;&lt;/a&gt;澳门半天(2018-06-16)&lt;/h2&gt;&lt;p&gt;平日锁在一个笼子一样的办公室，今
      
    
    </summary>
    
    
      <category term="点滴" scheme="http://chenyangguang.github.com/tags/%E7%82%B9%E6%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>最近</title>
    <link href="http://chenyangguang.github.com/2018-06-05-stronger/"/>
    <id>http://chenyangguang.github.com/2018-06-05-stronger/</id>
    <published>2018-06-05T13:35:41.000Z</published>
    <updated>2018-08-12T07:14:27.741Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变动"><a href="#变动" class="headerlink" title="变动"></a>变动</h2><p>过去半年，经历了不少新的东西。<br>遇到不少问题。不过都已经过去，都一一过去了。<br>这半年的工作遇到的问题，比去年加起来都多。主要是因为工作变动，原先从事 php 和 python 开发转到 golang 上面。然后是工作环境从 ubuntu 切到 windows 上。谁说开发工具不重要的，真的到一个团队里面去的时候，周围的工具链还是很影响效率的。</p><h2 id="无题"><a href="#无题" class="headerlink" title="无题"></a>无题</h2><p>和 golang 相匹配的工具链一大坨，docker, elk, beego, k8s 都需要时间消化，然后自己还要对基础进行补课(数据结构和算法依然是短板)， 对于网络协议的理解还是粗浅， 对mysql, redis 的使用还不够深熟。这些还只是闲暇时间的事情。日常工作中又常是各种旧的系统留下的 bug, 排查日志，定位问题，运维修复。一边还得和别的部门打交道，交接沟通头痛的需求，“过堂”……</p><h2 id="小成"><a href="#小成" class="headerlink" title="小成"></a>小成</h2><p>不过这半年过得还是蛮充实的。处理的问题多了，慢慢地也就心里有点数了。对于某些事情的轻重缓急有了划分，渐渐抽出时间实现一些认为更有价值的东西去。<br>而且每迈过一道坎，就信心更增加了一些。后面遇到问题，就不至于那么慌了。</p><p>强者需要面对更多的困难。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;变动&quot;&gt;&lt;a href=&quot;#变动&quot; class=&quot;headerlink&quot; title=&quot;变动&quot;&gt;&lt;/a&gt;变动&lt;/h2&gt;&lt;p&gt;过去半年，经历了不少新的东西。&lt;br&gt;遇到不少问题。不过都已经过去，都一一过去了。&lt;br&gt;这半年的工作遇到的问题，比去年加起来都多。主要是因
      
    
    </summary>
    
    
      <category term="点滴" scheme="http://chenyangguang.github.com/tags/%E7%82%B9%E6%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>ball-lightning</title>
    <link href="http://chenyangguang.github.com/2018-05-20-ball-lightning/"/>
    <id>http://chenyangguang.github.com/2018-05-20-ball-lightning/</id>
    <published>2018-05-20T15:31:22.000Z</published>
    <updated>2018-08-12T07:14:27.736Z</updated>
    
    <content type="html"><![CDATA[<h3 id="故事情节"><a href="#故事情节" class="headerlink" title="故事情节"></a>故事情节</h3><p>《球形闪电》是刘慈欣早年的科幻作品。以第一人称讲述了一个少年孩童时代，因一晚狂暴的雷雨之夜被球形闪电夺去父母性命的机缘下，从此迷上了球形闪电的科幻故事。</p><h3 id="读感1"><a href="#读感1" class="headerlink" title="读感1"></a>读感1</h3><p>大学毕业之后已经很久没看过科幻小说了。现在看小说和以前有最大的不同就是快速浏览。不再像以前那样仔细咀嚼。而且都是不敢兴趣的章节往往直接跳过去。另外就是，会被中间的某些情景突然带到现实世界中，应该是”分神”。不是那种纯想象的情景。这或许是就是看到和接触到的现实的事物多了，想象力就慢慢的衰弱的感觉吧。一度还对个别场景下的描述觉得可疑，觉得那些不可能发生的。</p><h3 id="读感２"><a href="#读感２" class="headerlink" title="读感２"></a>读感２</h3><p>可是，科幻小说真正的目标不就是联系现实，并且超越现实，思考和憧憬那些美好的未知事物吗？这些想象创造出那些过去和现在都不存在，在未来有可能存在的创造物和事件。比如古代的封神演义里面的千里眼，顺风耳等，现在都已经有了实际的对应事物。但是真正令我们着迷的永远是未知的事物, 比如黑洞，星际旅行。无论是宏观还是微观上的想象力，都是这个宇宙的美好。</p><h3 id="收获共鸣"><a href="#收获共鸣" class="headerlink" title="收获共鸣"></a>收获共鸣</h3><p>我对其中的一句话特别有感触：“美妙人生的关键在于你能迷上什么”。这不就是我们一生在追求并为之努力的东西吗?</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;故事情节&quot;&gt;&lt;a href=&quot;#故事情节&quot; class=&quot;headerlink&quot; title=&quot;故事情节&quot;&gt;&lt;/a&gt;故事情节&lt;/h3&gt;&lt;p&gt;《球形闪电》是刘慈欣早年的科幻作品。以第一人称讲述了一个少年孩童时代，因一晚狂暴的雷雨之夜被球形闪电夺去父母性命的机缘下，从
      
    
    </summary>
    
    
      <category term="读书" scheme="http://chenyangguang.github.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>从 ubuntu 到 arch</title>
    <link href="http://chenyangguang.github.com/2018-05-19-arch/"/>
    <id>http://chenyangguang.github.com/2018-05-19-arch/</id>
    <published>2018-05-19T13:48:54.000Z</published>
    <updated>2018-08-12T07:14:27.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="逃离-ubuntu-转投-arch"><a href="#逃离-ubuntu-转投-arch" class="headerlink" title="逃离 ubuntu 转投 arch"></a>逃离 ubuntu 转投 arch</h2><p>起因先是 ubuntu16.04 升级到 ubuntu18.04, 结果每次开机直接进入了一个grub的　shell 界面, 系统无法启动了。第二次装了ubuntu18.04, 然后后面装了不少开发软件，再升级时，又挂了！有点来气，花了两天时间重装系统。不过，这次是换成了 arch。为啥，因为 arch 官网上介绍说它的定制性更高（更需要折腾），而且是滚动更新(What are you 弄啥咧?)。</p><h2 id="arch-系统的-u-盘安装"><a href="#arch-系统的-u-盘安装" class="headerlink" title="arch 系统的 ｕ 盘安装"></a>arch 系统的 ｕ 盘安装</h2><p>记录一下，头一天的时候，我的安装方式是按照知乎某个人的推荐装的，结果好几个地方卡死了。比如联网，比如挂载。后来证明，只要熟读 arch 官网　wiki 上面的文档(武功秘籍)，基本上是不会整出一些”奇门遁甲”的啥”幺蛾子”的。前提是，一定要通读。</p><h2 id="切到-arch-的感受"><a href="#切到-arch-的感受" class="headerlink" title="切到 arch 的感受"></a>切到 arch 的感受</h2><ul><li>速度比 ubuntu 快。天下武功，唯快不破。不知道是否因为 arch 的二进制包的安装方式，还是 安装的无关的依赖很少的缘故，在 arch 下面上网几乎不卡。即使看 youtube 视频也是非常流畅!</li><li>安装效率高。arch 下面 <strong>sudo pacman -S smartgit</strong>, 需要安装的依赖，直接选数字然后回车就好了。安装好快。而 ubuntu 下面安装 smartgit 的需要好几个步骤，比如你安装了 smartgit包，好需要相同的命令去找缺失的依赖包(javaxxxxxx)。还得说下使用 “yaourt” 去安装 <strong>AUR</strong> 类型的软件真的是很便利。比如 安装个 <strong>nmap</strong> 扫描一下主机ip和端口:</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜  blog git:(master) ✗ yaourt nmap</span><br><span class="line">1 extra/nmap 7.70-2 [installed]</span><br><span class="line">    Utility <span class="keyword">for</span><span class="built_in"> network discovery </span><span class="keyword">and</span> security auditing</span><br><span class="line">2 community/vulscan 2.0-2</span><br><span class="line">    A module which enhances nmap <span class="keyword">to</span> a vulnerability scanner</span><br><span class="line">3 blackarch/autonse 20.82a6e18-1 (blackarch blackarch-automation)</span><br><span class="line">    Massive NSE (Nmap Scripting Engine) AutoSploit <span class="keyword">and</span> AutoScanner.</span><br><span class="line">4 blackarch/brutespray 116.bd65d69-2 (blackarch blackarch-automation blackarch-cracker)</span><br><span class="line"><span class="built_in">..</span>.</span><br><span class="line">32 aur/umit 1.0-1 (67) (0.20)</span><br><span class="line">    A powerful nmap frontend.</span><br><span class="line">==&gt; Enter n° of packages <span class="keyword">to</span> be installed (e.g., 1 2 3 <span class="keyword">or</span> 1-3)</span><br><span class="line">==&gt; ---------------------------------------------------------</span><br><span class="line">==&gt; (这里选数字然后回车就可以了)</span><br></pre></td></tr></table></figure><ul><li>几乎所有需要的比较新的软件和开发工具都有了。而且都是命令行三两下就安装好了。比如 docker, vim，emacs, docker, git, smartgit, nodejs, npm, nvm, python(系统自带了), php, nginx, apache, mysql, mariadb, postgresql， virtualbox, tmux, zsh(这个好像是自带了), shadowsocks(这个好极了,就下个package, 再命令行启动一下，浏览器加个 proxy 扩展就直接翻出去了!)等, 而且这些软件几乎都是主流中非常新的版本！这个比较和我心意。</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>通过 ubuntu 迁移到 arch 的过程，中间加深了对挂载，分区，以及搭建系统的很多命令的认知。</li><li>选一个就近的源，比如清华的。</li><li>没有什么是不能用一条命令解决不了的，如果不行就用两条! </li><li>安装过程中，有犯错，比如一开始略过官方 wiki 直接参照网上某个人的推荐，东看一点，细看一点，结果这个装了一半，那个流程也是一半，都出现了一些一时令人懊恼的问题。还好最后回归官网 wiki 通读，针对具体的章节细读，才顺利解决了。</li><li>安装 arch 一定要联网。最简单是直接通过命令行的 <code>wifi-menu</code> 调出无线 wifi　的列表，选择自己知道密码的那个 wifi, 然后输入密码。</li><li>选一个图形界面桌面，比如 xfce, 安装。</li><li>在联网的基础上，第一要务是先翻出去。道理不用多说。其他都是水到渠成了。</li><li>从 arch 系统中 安装 blackarch 非常方便。blackarch 包含大概 1900 多个黑客武器! 强大而丰富的武器库！我去扒了一下，貌似 blackarch 还是 kali 系统的那个团队搞的!</li><li>然后，能用命令行快速解决的，就不要多花时间去选个图标了。比如一开视频，发现，播放没有声音! 装个 alsamixer　即可, 命令行里面直接调起 alsamixer, 控制音量啥的，都在里面了。弄张图吧。<br><img src="/images/full.jpg" alt=""></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;逃离-ubuntu-转投-arch&quot;&gt;&lt;a href=&quot;#逃离-ubuntu-转投-arch&quot; class=&quot;headerlink&quot; title=&quot;逃离 ubuntu 转投 arch&quot;&gt;&lt;/a&gt;逃离 ubuntu 转投 arch&lt;/h2&gt;&lt;p&gt;起因先是 ubunt
      
    
    </summary>
    
    
      <category term="arch" scheme="http://chenyangguang.github.com/tags/arch/"/>
    
  </entry>
  
  <entry>
    <title>源码</title>
    <link href="http://chenyangguang.github.com/2018-05-01-tools/"/>
    <id>http://chenyangguang.github.com/2018-05-01-tools/</id>
    <published>2018-05-01T01:50:57.000Z</published>
    <updated>2018-08-12T07:14:27.741Z</updated>
    
    <content type="html"><![CDATA[<h2 id="源码看累了"><a href="#源码看累了" class="headerlink" title="源码看累了"></a>源码看累了</h2><p>源码看着看着，会产生一种疑惑： 我为什么要看源码？当初我之所以到底层看源码，完全是好奇，想知道它后面运行的机制。但是，最近开始疲劳了。忽然觉得：这样是不是没什么必要？因为，一个好的赛车手，未必就能造车，或者修车。但他可以将车玩的很溜, 上演速度与激情！而一个造车师傅，或者修车师傅，却不一定能在 F1 赛道上撒的开。<br>那么，如果满足了好奇心之后，还有必要去深究底层的实现逻辑么？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;源码看累了&quot;&gt;&lt;a href=&quot;#源码看累了&quot; class=&quot;headerlink&quot; title=&quot;源码看累了&quot;&gt;&lt;/a&gt;源码看累了&lt;/h2&gt;&lt;p&gt;源码看着看着，会产生一种疑惑： 我为什么要看源码？当初我之所以到底层看源码，完全是好奇，想知道它后面运行的机制。但是
      
    
    </summary>
    
    
      <category term="php" scheme="http://chenyangguang.github.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>php 源码 (宏)</title>
    <link href="http://chenyangguang.github.com/2018-05-01-php-source-code-basic-string/"/>
    <id>http://chenyangguang.github.com/2018-05-01-php-source-code-basic-string/</id>
    <published>2018-05-01T01:50:57.000Z</published>
    <updated>2018-08-12T07:14:27.740Z</updated>
    
    <content type="html"><![CDATA[<h2 id="zend-基础类型-宏"><a href="#zend-基础类型-宏" class="headerlink" title="zend 基础类型- 宏"></a>zend 基础类型- 宏</h2><p>zend 底层有相当多的宏, 特别是 php7 系列, 源码比 php 5 有不少结构方面的改变。所以不去研究 php5 的 zend 了, 直接往后研究的源码都主要看最新的 <strong>php-src</strong>。 zend 系列的宏主要分布在 zend_API.h, zend_types.h, zend_operators.h 里面。<br><a id="more"></a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_object_handlers</span> <span class="title">zend_object_handlers</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_class_entry</span>     <span class="title">zend_class_entry</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">union</span>  _zend_function        zend_function;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_execute_data</span>    <span class="title">zend_execute_data</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zval_struct</span>     <span class="title">zval</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_refcounted</span> <span class="title">zend_refcounted</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_string</span>     <span class="title">zend_string</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_array</span>      <span class="title">zend_array</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_object</span>     <span class="title">zend_object</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_resource</span>   <span class="title">zend_resource</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_reference</span>  <span class="title">zend_reference</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_ast_ref</span>    <span class="title">zend_ast_ref</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_ast</span>        <span class="title">zend_ast</span>;</span></span><br></pre></td></tr></table></figure><p>放眼望去，似曾相识燕归来！ </p><h3 id="zval"><a href="#zval" class="headerlink" title="zval"></a>zval</h3><p>zval 不就是大名鼎鼎的 php 变量容器么！源码内使用频率相当高。一搜 php-src，超过 9999 次现身!<br>可想而知， zval 肯定是灰常重要的。<br>解开这个结构体，发现是这个模样:</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">_zval_struct</span> &#123;</span></span><br><span class="line">zend_value        value;<span class="regexp">/* value */</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">ZEND_ENDIAN_LOHI_4(</span><br><span class="line">zend_uchar    <span class="keyword">type</span>,<span class="regexp">/* active type */</span></span><br><span class="line">zend_uchar    type_flags,</span><br><span class="line">zend_uchar    const_flags,</span><br><span class="line">zend_uchar    reserved)    /* call info <span class="keyword">for</span> EX(This) *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">&#125; v;</span></span><br><span class="line"><span class="regexp">uint32_t type_info;</span></span><br><span class="line"><span class="regexp">&#125; u1;</span></span><br><span class="line"><span class="regexp">union &#123;</span></span><br><span class="line"><span class="regexp">uint32_t     next;                 /</span>* hash collision chain *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">uint32_t     cache_slot;           /</span>* literal cache slot *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">uint32_t     lineno;               /</span>* line number (<span class="keyword">for</span> ast nodes) *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">uint32_t     num_args;             /</span>* arguments number <span class="keyword">for</span> EX(This) *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">uint32_t     fe_pos;               /</span>* foreach position *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">uint32_t     fe_iter_idx;          /</span>* foreach iterator index *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">uint32_t     access_flags;         /</span>* <span class="class"><span class="keyword">class</span> <span class="title">constant</span> <span class="title">access</span> <span class="title">flags</span> */</span></span><br><span class="line">uint32_t     property_guard;       <span class="regexp">/* single property guard */</span></span><br><span class="line">uint32_t     extra;                <span class="regexp">/* not further specified */</span></span><br><span class="line">&#125; u2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>分为三个部分， zend_value, u1, u2 三个联合体。<br>跟踪 zend_value 看看, </p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">typedef union _zend_value &#123;</span><br><span class="line">zend_long         lval<span class="comment">;/* long value */</span></span><br><span class="line">double            dval<span class="comment">;/* double value */</span></span><br><span class="line">zend_refcounted  *counted<span class="comment">;</span></span><br><span class="line">zend_string      *str<span class="comment">;</span></span><br><span class="line">zend_array       *arr<span class="comment">;</span></span><br><span class="line">zend_object      *obj<span class="comment">;</span></span><br><span class="line">zend_resource    *res<span class="comment">;</span></span><br><span class="line">zend_reference   *ref<span class="comment">;</span></span><br><span class="line">zend_ast_ref     *ast<span class="comment">;</span></span><br><span class="line">zval             *zv<span class="comment">;</span></span><br><span class="line">void             *ptr<span class="comment">;</span></span><br><span class="line">zend_class_entry *ce<span class="comment">;</span></span><br><span class="line">zend_function    *func<span class="comment">;</span></span><br><span class="line">struct &#123;</span><br><span class="line">uint32_t w1<span class="comment">;</span></span><br><span class="line">uint32_t w2<span class="comment">;</span></span><br><span class="line">&#125; ww<span class="comment">;</span></span><br><span class="line">&#125; zend_value<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>跋山涉水， zend_value 这个联合体可以存放所有可能的 php 数据类型数据。 数值分: 长整型或者双精度浮点型。 剩下的基本是指针值。有计数器指针，字符串指针，数组指针，对象指针，资源指针，引用指针, 空指针， 类指针，函数指针。 </p><p>而 u1 里面又是啥东东？ ZEND_ENDIAN_LOHI_4()这个东西, </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">ifdef WORDS_BIGENDIAN</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> define ZEND_ENDIAN_LOHI(lo, hi)          hi; lo;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> define ZEND_ENDIAN_LOHI_3(lo, mi, hi)    hi; mi; lo;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> define ZEND_ENDIAN_LOHI_4(a, b, c, d)    d; c; b; a;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> define ZEND_ENDIAN_LOHI_C(lo, hi)        hi, lo</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> define ZEND_ENDIAN_LOHI_C_3(lo, mi, hi)  hi, mi, lo,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> define ZEND_ENDIAN_LOHI_C_4(a, b, c, d)  d, c, b, a</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> define ZEND_ENDIAN_LOHI(lo, hi)          lo; hi;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> define ZEND_ENDIAN_LOHI_3(lo, mi, hi)    lo; mi; hi;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> define ZEND_ENDIAN_LOHI_4(a, b, c, d)    a; b; c; d;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> define ZEND_ENDIAN_LOHI_C(lo, hi)        lo, hi</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> define ZEND_ENDIAN_LOHI_C_3(lo, mi, hi)  lo, mi, hi,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> define ZEND_ENDIAN_LOHI_C_4(a, b, c, d)  a, b, c, d</span></span><br><span class="line"><span class="meta">#</span><span class="bash">endif</span></span><br></pre></td></tr></table></figure><p>这些 哆瑞咪发嗦啦奇多, 暂时不知道做什么。不过 type, type_flags, const_flags, reserved 按照字面意思应该包含激活的类型，类型标志，常量标记，保留值。所以 u1 其实是存的类型相关的信息值。</p><p>u2 里面是存放一个额外的数据, 有介绍说是一般情况下用不到？这个<a href="http://nikic.github.io/" target="_blank" rel="noopener">博客</a>说的。</p><p>这里面有几个疑问仍未确定: </p><ol><li>zend_ast_ref 是类型数据？ </li><li>又有一个 zval! 这个是为什么？ 这个效果是不是这样： 我这个值里面还可以放任何类型的数据！php 就是这样实现存放数据的么？</li><li>php 官方文档给出的是基本类型是 Boolean 布尔类型， Integer整型，Float 浮点型，String 字符串，Array 数组，Object 对象，Resource 资源类型，NULL, CallBack/Callable类型。</li><li>ww 这个结构体是干啥用的？莫非是存放 CallBack/Callable 类型的数据？</li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>PHP 底层没有看起来的那么简单。有些构造可能是巧妙的，但是目前还领会不到。</p><!--more-->]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;zend-基础类型-宏&quot;&gt;&lt;a href=&quot;#zend-基础类型-宏&quot; class=&quot;headerlink&quot; title=&quot;zend 基础类型- 宏&quot;&gt;&lt;/a&gt;zend 基础类型- 宏&lt;/h2&gt;&lt;p&gt;zend 底层有相当多的宏, 特别是 php7 系列, 源码比 php 5 有不少结构方面的改变。所以不去研究 php5 的 zend 了, 直接往后研究的源码都主要看最新的 &lt;strong&gt;php-src&lt;/strong&gt;。 zend 系列的宏主要分布在 zend_API.h, zend_types.h, zend_operators.h 里面。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="php" scheme="http://chenyangguang.github.com/tags/php/"/>
    
  </entry>
  
</feed>
